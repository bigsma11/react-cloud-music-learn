{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["dataFetchReducer","state","action","type","isLoading","isError","data","payload","Error","App","useState","query","setQuery","initialUrl","initialData","url","setUrl","useReducer","dispatch","console","log","useEffect","didCancel","a","axios","result","fetchData","useDataApi","hits","onSubmit","event","preventDefault","value","onChange","target","map","item","key","objectID","href","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAGMA,EAAmB,SAACC,EAAOC,GAC/B,OAAQA,EAAOC,MACb,IAAK,aACH,OAAO,eAAKF,EAAZ,CAAmBG,WAAW,EAAMC,SAAS,IAC/C,IAAK,gBACH,OAAO,eAAKJ,EAAZ,CAAmBG,WAAW,EAAOC,SAAS,EAAOC,KAAMJ,EAAOK,UACpE,IAAK,gBACH,OAAO,eAAKN,EAAZ,CAAmBG,WAAW,EAAOC,SAAS,IAChD,QACE,MAAM,IAAIG,QAkFDC,MAlCf,WAAgB,IAAD,EACaC,mBAAS,SADtB,mBACNC,EADM,KACCC,EADD,OA5CI,SAACC,EAAYC,GAAiB,IAAD,EACxBJ,mBAASG,GADe,mBACvCE,EADuC,KAClCC,EADkC,OAMpBC,qBAAWjB,EAAkB,CACrDI,WAAW,EACXC,SAAS,EACTC,KAAMQ,IATsC,mBAMvCb,EANuC,KAMhCiB,EANgC,KAyC9C,OA7BAC,QAAQC,IAAInB,GAEZoB,qBAAU,WACR,IAAIC,GAAY,EAqBhB,OAnBe,uCAAG,4BAAAC,EAAA,6DAGhBL,EAAS,CAAEf,KAAM,eAHD,kBAKOqB,IAAMT,GALb,OAKRU,EALQ,OAOTH,GACHJ,EAAS,CAAEf,KAAM,gBAAiBI,QAASkB,EAAOnB,OARtC,gDAWTgB,GACHJ,EAAS,CAAEf,KAAM,kBAZL,yDAAH,oDAiBfuB,GAEO,WACLJ,GAAY,KAEb,CAACP,IAEG,CAACd,EAAOe,GAQXW,CAAW,mDAAoD,CAAEC,KAAM,KAL9D,0BAGTtB,EAHS,EAGTA,KAAMF,EAHG,EAGHA,UAAWC,EAHR,EAGQA,QACnBW,EAJW,KAYb,OACE,oCACE,0BAAMa,SAPW,SAACC,GACpBA,EAAMC,iBACNf,EAAO,8CAAD,OAA+CL,MAMjD,2BAAOR,KAAK,OAAO6B,MAAOrB,EAAOsB,SAAU,SAACH,GAAD,OAAWlB,EAASkB,EAAMI,OAAOF,UAC5E,4BAAQ7B,KAAK,UAAb,WAEDE,GAAW,wDACXD,EACC,2CAEA,4BACGE,EAAKsB,KAAKO,KAAI,SAACC,GAAD,OACb,wBAAIC,IAAKD,EAAKE,UACZ,uBAAGC,KAAMH,EAAKrB,KAAMqB,EAAKI,cCzEnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.196a2370.chunk.js","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react'\nimport axios from 'axios'\n\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return { ...state, isLoading: true, isError: false }\n    case 'FETCH_SUCCESS':\n      return { ...state, isLoading: false, isError: false, data: action.payload }\n    case 'FETCH_FAILURE':\n      return { ...state, isLoading: false, isError: true }\n    default:\n      throw new Error()\n  }\n}\n\nconst useDataApi = (initialUrl, initialData) => {\n  const [url, setUrl] = useState(initialUrl)\n  // const [data, setData] = useState(initialData)\n  // const [isLoading, setIsLoading] = useState(false)\n  // const [isError, setIsError] = useState(false)\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  })\n\n  console.log(state)\n\n  useEffect(() => {\n    let didCancel = false\n\n    const fetchData = async () => {\n      // setIsLoading(true)\n      // setIsError(false)\n      dispatch({ type: 'FETCH_INIT' })\n      try {\n        const result = await axios(url)\n\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_SUCCESS', payload: result.data })\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_FAILURE' })\n        }\n      }\n    }\n\n    fetchData()\n\n    return () => {\n      didCancel = true\n    }\n  }, [url])\n\n  return [state, setUrl]\n}\n\nfunction App() {\n  const [query, setQuery] = useState('redux')\n  const [\n    { data, isLoading, isError },\n    setUrl,\n  ] = useDataApi('https://hn.algolia.com/api/v1/search?query=redux', { hits: [] })\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    setUrl(`https://hn.algolia.com/api/v1/search?query=${query}`)\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={query} onChange={(event) => setQuery(event.target.value)} />\n        <button type=\"submit\">Search</button>\n      </form>\n      {isError && <div>Something went wrong...</div>}\n      {isLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <ul>\n          {data.hits.map((item) => (\n            <li key={item.objectID}>\n              <a href={item.url}>{item.title}</a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}